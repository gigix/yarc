#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
class CalcParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     7,     8,     1,     9,     2,     1,     1,     2,     2,     1,
     6,     2,     7,     8,     7,     8,     7,     8,    10 ]

racc_action_check = [
     5,     5,     8,     5,     8,     1,     0,     1,     0,     7,
     3,     7,    11,    11,     4,     4,    12,    12,     6 ]

racc_action_pointer = [
     2,     1,   nil,    10,    12,    -2,    18,     5,    -2,   nil,
   nil,    10,    14 ]

racc_action_default = [
    -6,    -6,    -5,    -6,    -1,    -6,    -6,    -6,    -6,    -4,
    13,    -2,    -3 ]

racc_goto_table = [
     4,     5,     3,   nil,   nil,   nil,   nil,    11,    12 ]

racc_goto_check = [
     2,     2,     1,   nil,   nil,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     2,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 8, :_reduce_1,
  3, 9, :_reduce_none,
  3, 9, :_reduce_none,
  3, 9, :_reduce_none,
  1, 9, :_reduce_none ]

racc_reduce_n = 6

racc_shift_n = 13

racc_token_table = {
  false => 0,
  :error => 1,
  "+" => 2,
  "*" => 3,
  "(" => 4,
  ")" => 5,
  :NUMBER => 6 }

racc_nt_base = 7

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"+\"",
  "\"*\"",
  "\"(\"",
  "\")\"",
  "NUMBER",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'calc_parser.y', 2)
  def _reduce_1(val, _values, result)
     print val[0] 
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CalcParser
